// Generated by gencpp from file action_infer/ObsCache.msg
// DO NOT EDIT!


#ifndef ACTION_INFER_MESSAGE_OBSCACHE_H
#define ACTION_INFER_MESSAGE_OBSCACHE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_infer
{
template <class ContainerAllocator>
struct ObsCache_
{
  typedef ObsCache_<ContainerAllocator> Type;

  ObsCache_()
    : stamp()
    , pose_1()
    , pose_2()
    , point_cloud_1()
    , point_cloud_2()  {
    }
  ObsCache_(const ContainerAllocator& _alloc)
    : stamp()
    , pose_1(_alloc)
    , pose_2(_alloc)
    , point_cloud_1(_alloc)
    , point_cloud_2(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pose_1_type;
  _pose_1_type pose_1;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pose_2_type;
  _pose_2_type pose_2;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _point_cloud_1_type;
  _point_cloud_1_type point_cloud_1;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _point_cloud_2_type;
  _point_cloud_2_type point_cloud_2;





  typedef boost::shared_ptr< ::action_infer::ObsCache_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_infer::ObsCache_<ContainerAllocator> const> ConstPtr;

}; // struct ObsCache_

typedef ::action_infer::ObsCache_<std::allocator<void> > ObsCache;

typedef boost::shared_ptr< ::action_infer::ObsCache > ObsCachePtr;
typedef boost::shared_ptr< ::action_infer::ObsCache const> ObsCacheConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_infer::ObsCache_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_infer::ObsCache_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_infer::ObsCache_<ContainerAllocator1> & lhs, const ::action_infer::ObsCache_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.pose_1 == rhs.pose_1 &&
    lhs.pose_2 == rhs.pose_2 &&
    lhs.point_cloud_1 == rhs.point_cloud_1 &&
    lhs.point_cloud_2 == rhs.point_cloud_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_infer::ObsCache_<ContainerAllocator1> & lhs, const ::action_infer::ObsCache_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_infer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::action_infer::ObsCache_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_infer::ObsCache_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_infer::ObsCache_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_infer::ObsCache_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_infer::ObsCache_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_infer::ObsCache_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_infer::ObsCache_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0afcc9dc37d685388aeb48cae3618cb4";
  }

  static const char* value(const ::action_infer::ObsCache_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0afcc9dc37d68538ULL;
  static const uint64_t static_value2 = 0x8aeb48cae3618cb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_infer::ObsCache_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_infer/ObsCache";
  }

  static const char* value(const ::action_infer::ObsCache_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_infer::ObsCache_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float32[] pose_1\n"
"float32[] pose_2\n"
"float32[] point_cloud_1\n"
"float32[] point_cloud_2\n"
;
  }

  static const char* value(const ::action_infer::ObsCache_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_infer::ObsCache_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.pose_1);
      stream.next(m.pose_2);
      stream.next(m.point_cloud_1);
      stream.next(m.point_cloud_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObsCache_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_infer::ObsCache_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_infer::ObsCache_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "pose_1[]" << std::endl;
    for (size_t i = 0; i < v.pose_1.size(); ++i)
    {
      s << indent << "  pose_1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_1[i]);
    }
    s << indent << "pose_2[]" << std::endl;
    for (size_t i = 0; i < v.pose_2.size(); ++i)
    {
      s << indent << "  pose_2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_2[i]);
    }
    s << indent << "point_cloud_1[]" << std::endl;
    for (size_t i = 0; i < v.point_cloud_1.size(); ++i)
    {
      s << indent << "  point_cloud_1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.point_cloud_1[i]);
    }
    s << indent << "point_cloud_2[]" << std::endl;
    for (size_t i = 0; i < v.point_cloud_2.size(); ++i)
    {
      s << indent << "  point_cloud_2[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.point_cloud_2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_INFER_MESSAGE_OBSCACHE_H
