// Generated by gencpp from file action_infer/TwistGripper.msg
// DO NOT EDIT!


#ifndef ACTION_INFER_MESSAGE_TWISTGRIPPER_H
#define ACTION_INFER_MESSAGE_TWISTGRIPPER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace action_infer
{
template <class ContainerAllocator>
struct TwistGripper_
{
  typedef TwistGripper_<ContainerAllocator> Type;

  TwistGripper_()
    : stamp()
    , twist()
    , gripper(0.0)  {
    }
  TwistGripper_(const ContainerAllocator& _alloc)
    : stamp()
    , twist(_alloc)
    , gripper(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef float _gripper_type;
  _gripper_type gripper;





  typedef boost::shared_ptr< ::action_infer::TwistGripper_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_infer::TwistGripper_<ContainerAllocator> const> ConstPtr;

}; // struct TwistGripper_

typedef ::action_infer::TwistGripper_<std::allocator<void> > TwistGripper;

typedef boost::shared_ptr< ::action_infer::TwistGripper > TwistGripperPtr;
typedef boost::shared_ptr< ::action_infer::TwistGripper const> TwistGripperConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_infer::TwistGripper_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_infer::TwistGripper_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_infer::TwistGripper_<ContainerAllocator1> & lhs, const ::action_infer::TwistGripper_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.twist == rhs.twist &&
    lhs.gripper == rhs.gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_infer::TwistGripper_<ContainerAllocator1> & lhs, const ::action_infer::TwistGripper_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_infer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::action_infer::TwistGripper_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_infer::TwistGripper_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_infer::TwistGripper_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_infer::TwistGripper_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_infer::TwistGripper_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_infer::TwistGripper_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_infer::TwistGripper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee0372fbde743581b8670dce4da4b75c";
  }

  static const char* value(const ::action_infer::TwistGripper_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee0372fbde743581ULL;
  static const uint64_t static_value2 = 0xb8670dce4da4b75cULL;
};

template<class ContainerAllocator>
struct DataType< ::action_infer::TwistGripper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_infer/TwistGripper";
  }

  static const char* value(const ::action_infer::TwistGripper_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_infer::TwistGripper_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"geometry_msgs/Twist twist\n"
"float32 gripper\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::action_infer::TwistGripper_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_infer::TwistGripper_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.twist);
      stream.next(m.gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TwistGripper_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_infer::TwistGripper_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_infer::TwistGripper_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "gripper: ";
    Printer<float>::stream(s, indent + "  ", v.gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_INFER_MESSAGE_TWISTGRIPPER_H
