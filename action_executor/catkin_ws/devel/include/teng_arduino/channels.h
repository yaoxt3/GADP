// Generated by gencpp from file teng_arduino/channels.msg
// DO NOT EDIT!


#ifndef TENG_ARDUINO_MESSAGE_CHANNELS_H
#define TENG_ARDUINO_MESSAGE_CHANNELS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teng_arduino
{
template <class ContainerAllocator>
struct channels_
{
  typedef channels_<ContainerAllocator> Type;

  channels_()
    : stamp()
    , c()  {
    }
  channels_(const ContainerAllocator& _alloc)
    : stamp()
    , c(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _c_type;
  _c_type c;





  typedef boost::shared_ptr< ::teng_arduino::channels_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teng_arduino::channels_<ContainerAllocator> const> ConstPtr;

}; // struct channels_

typedef ::teng_arduino::channels_<std::allocator<void> > channels;

typedef boost::shared_ptr< ::teng_arduino::channels > channelsPtr;
typedef boost::shared_ptr< ::teng_arduino::channels const> channelsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teng_arduino::channels_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teng_arduino::channels_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teng_arduino::channels_<ContainerAllocator1> & lhs, const ::teng_arduino::channels_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.c == rhs.c;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teng_arduino::channels_<ContainerAllocator1> & lhs, const ::teng_arduino::channels_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teng_arduino

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::teng_arduino::channels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teng_arduino::channels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teng_arduino::channels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teng_arduino::channels_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teng_arduino::channels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teng_arduino::channels_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teng_arduino::channels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78b27486b5f7984dbb5e15d9126d42d7";
  }

  static const char* value(const ::teng_arduino::channels_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78b27486b5f7984dULL;
  static const uint64_t static_value2 = 0xbb5e15d9126d42d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::teng_arduino::channels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teng_arduino/channels";
  }

  static const char* value(const ::teng_arduino::channels_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teng_arduino::channels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float32[] c\n"
;
  }

  static const char* value(const ::teng_arduino::channels_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teng_arduino::channels_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct channels_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teng_arduino::channels_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teng_arduino::channels_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "c[]" << std::endl;
    for (size_t i = 0; i < v.c.size(); ++i)
    {
      s << indent << "  c[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.c[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TENG_ARDUINO_MESSAGE_CHANNELS_H
